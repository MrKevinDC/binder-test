CustomFeatureAgglomeration
CustomKNearestNeighborsRegressor
CustomKernelRidgeRegression
Configuration space object:
  Hyperparameters:
    data_preprocessor:__choice__, Type: Categorical, Choices: {feature_type}, Default: feature_type
    data_preprocessor:feature_type:numerical_transformer:imputation:strategy, Type: Categorical, Choices: {mean, median, most_frequent}, Default: mean
    data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__, Type: Categorical, Choices: {minmax, none, normalize, power_transformer, quantile_transformer, robust_scaler, standardize}, Default: standardize
    data_preprocessor:feature_type:numerical_transformer:rescaling:quantile_transformer:n_quantiles, Type: UniformInteger, Range: [10, 2000], Default: 1000
    data_preprocessor:feature_type:numerical_transformer:rescaling:quantile_transformer:output_distribution, Type: Categorical, Choices: {normal, uniform}, Default: normal
    data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_max, Type: UniformFloat, Range: [0.7, 0.999], Default: 0.75
    data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_min, Type: UniformFloat, Range: [0.001, 0.3], Default: 0.25
    feature_preprocessor:CustomFeatureAgglomeration:affinity, Type: Categorical, Choices: {euclidean, manhattan, cosine}, Default: euclidean
    feature_preprocessor:CustomFeatureAgglomeration:linkage, Type: Categorical, Choices: {ward, complete, average}, Default: ward
    feature_preprocessor:CustomFeatureAgglomeration:n_clusters, Type: UniformInteger, Range: [2, 30], Default: 2
    feature_preprocessor:CustomFeatureAgglomeration:pooling_func, Type: Categorical, Choices: {mean, median, max}, Default: mean
    feature_preprocessor:__choice__, Type: Categorical, Choices: {extra_trees_preproc_for_regression, fast_ica, kernel_pca, kitchen_sinks, no_preprocessing, nystroem_sampler, pca, polynomial, random_trees_embedding, select_percentile_regression, select_rates_regression, CustomFeatureAgglomeration}, Default: no_preprocessing
    feature_preprocessor:extra_trees_preproc_for_regression:bootstrap, Type: Categorical, Choices: {True, False}, Default: False
    feature_preprocessor:extra_trees_preproc_for_regression:criterion, Type: Categorical, Choices: {mse, friedman_mse, mae}, Default: mse
    feature_preprocessor:extra_trees_preproc_for_regression:max_depth, Type: Constant, Value: None
    feature_preprocessor:extra_trees_preproc_for_regression:max_features, Type: UniformFloat, Range: [0.1, 1.0], Default: 1.0
    feature_preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes, Type: Constant, Value: None
    feature_preprocessor:extra_trees_preproc_for_regression:min_samples_leaf, Type: UniformInteger, Range: [1, 20], Default: 1
    feature_preprocessor:extra_trees_preproc_for_regression:min_samples_split, Type: UniformInteger, Range: [2, 20], Default: 2
    feature_preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf, Type: Constant, Value: 0.0
    feature_preprocessor:extra_trees_preproc_for_regression:n_estimators, Type: Constant, Value: 100
    feature_preprocessor:fast_ica:algorithm, Type: Categorical, Choices: {parallel, deflation}, Default: parallel
    feature_preprocessor:fast_ica:fun, Type: Categorical, Choices: {logcosh, exp, cube}, Default: logcosh
    feature_preprocessor:fast_ica:n_components, Type: UniformInteger, Range: [10, 2000], Default: 100
    feature_preprocessor:fast_ica:whiten, Type: Categorical, Choices: {False, True}, Default: False
    feature_preprocessor:kernel_pca:coef0, Type: UniformFloat, Range: [-1.0, 1.0], Default: 0.0
    feature_preprocessor:kernel_pca:degree, Type: UniformInteger, Range: [2, 5], Default: 3
    feature_preprocessor:kernel_pca:gamma, Type: UniformFloat, Range: [3.0517578125e-05, 8.0], Default: 0.01, on log-scale
    feature_preprocessor:kernel_pca:kernel, Type: Categorical, Choices: {poly, rbf, sigmoid, cosine}, Default: rbf
    feature_preprocessor:kernel_pca:n_components, Type: UniformInteger, Range: [10, 2000], Default: 100
    feature_preprocessor:kitchen_sinks:gamma, Type: UniformFloat, Range: [3.0517578125e-05, 8.0], Default: 1.0, on log-scale
    feature_preprocessor:kitchen_sinks:n_components, Type: UniformInteger, Range: [50, 10000], Default: 100, on log-scale
    feature_preprocessor:nystroem_sampler:coef0, Type: UniformFloat, Range: [-1.0, 1.0], Default: 0.0
    feature_preprocessor:nystroem_sampler:degree, Type: UniformInteger, Range: [2, 5], Default: 3
    feature_preprocessor:nystroem_sampler:gamma, Type: UniformFloat, Range: [3.0517578125e-05, 8.0], Default: 0.1, on log-scale
    feature_preprocessor:nystroem_sampler:kernel, Type: Categorical, Choices: {poly, rbf, sigmoid, cosine}, Default: rbf
    feature_preprocessor:nystroem_sampler:n_components, Type: UniformInteger, Range: [50, 10000], Default: 100, on log-scale
    feature_preprocessor:pca:keep_variance, Type: UniformFloat, Range: [0.5, 0.9999], Default: 0.9999
    feature_preprocessor:pca:whiten, Type: Categorical, Choices: {False, True}, Default: False
    feature_preprocessor:polynomial:degree, Type: UniformInteger, Range: [2, 3], Default: 2
    feature_preprocessor:polynomial:include_bias, Type: Categorical, Choices: {True, False}, Default: True
    feature_preprocessor:polynomial:interaction_only, Type: Categorical, Choices: {False, True}, Default: False
    feature_preprocessor:random_trees_embedding:bootstrap, Type: Categorical, Choices: {True, False}, Default: True
    feature_preprocessor:random_trees_embedding:max_depth, Type: UniformInteger, Range: [2, 10], Default: 5
    feature_preprocessor:random_trees_embedding:max_leaf_nodes, Type: Constant, Value: None
    feature_preprocessor:random_trees_embedding:min_samples_leaf, Type: UniformInteger, Range: [1, 20], Default: 1
    feature_preprocessor:random_trees_embedding:min_samples_split, Type: UniformInteger, Range: [2, 20], Default: 2
    feature_preprocessor:random_trees_embedding:min_weight_fraction_leaf, Type: Constant, Value: 1.0
    feature_preprocessor:random_trees_embedding:n_estimators, Type: UniformInteger, Range: [10, 100], Default: 10
    feature_preprocessor:select_percentile_regression:percentile, Type: UniformFloat, Range: [1.0, 99.0], Default: 50.0
    feature_preprocessor:select_percentile_regression:score_func, Type: Categorical, Choices: {f_regression, mutual_info}, Default: f_regression
    feature_preprocessor:select_rates_regression:alpha, Type: UniformFloat, Range: [0.01, 0.5], Default: 0.1
    feature_preprocessor:select_rates_regression:mode, Type: Categorical, Choices: {fpr, fdr, fwe}, Default: fpr
    feature_preprocessor:select_rates_regression:score_func, Type: Categorical, Choices: {f_regression}, Default: f_regression
    regressor:CustomKNearestNeighborsRegressor:n_neighbors, Type: UniformInteger, Range: [1, 100], Default: 1, on log-scale
    regressor:CustomKNearestNeighborsRegressor:p, Type: Categorical, Choices: {1, 2}, Default: 2
    regressor:CustomKNearestNeighborsRegressor:weights, Type: Categorical, Choices: {uniform, distance}, Default: uniform
    regressor:CustomKernelRidgeRegression:alpha, Type: UniformFloat, Range: [1e-05, 1.0], Default: 1.0, on log-scale
    regressor:CustomKernelRidgeRegression:coef0, Type: UniformFloat, Range: [0.01, 100.0], Default: 1.0, on log-scale
    regressor:CustomKernelRidgeRegression:degree, Type: UniformInteger, Range: [2, 5], Default: 3
    regressor:CustomKernelRidgeRegression:gamma, Type: UniformFloat, Range: [1e-05, 1.0], Default: 0.1, on log-scale
    regressor:CustomKernelRidgeRegression:kernel, Type: Categorical, Choices: {polynomial, rbf}, Default: polynomial
    regressor:__choice__, Type: Categorical, Choices: {adaboost, ard_regression, decision_tree, extra_trees, gaussian_process, gradient_boosting, liblinear_svr, libsvm_svr, mlp, random_forest, sgd, CustomKNearestNeighborsRegressor, CustomKernelRidgeRegression}, Default: random_forest
    regressor:adaboost:learning_rate, Type: UniformFloat, Range: [0.01, 2.0], Default: 0.1, on log-scale
    regressor:adaboost:loss, Type: Categorical, Choices: {linear, square, exponential}, Default: linear
    regressor:adaboost:max_depth, Type: UniformInteger, Range: [1, 10], Default: 1
    regressor:adaboost:n_estimators, Type: UniformInteger, Range: [50, 500], Default: 50
    regressor:ard_regression:alpha_1, Type: UniformFloat, Range: [1e-10, 0.001], Default: 1e-06
    regressor:ard_regression:alpha_2, Type: UniformFloat, Range: [1e-10, 0.001], Default: 1e-06, on log-scale
    regressor:ard_regression:fit_intercept, Type: Constant, Value: True
    regressor:ard_regression:lambda_1, Type: UniformFloat, Range: [1e-10, 0.001], Default: 1e-06, on log-scale
    regressor:ard_regression:lambda_2, Type: UniformFloat, Range: [1e-10, 0.001], Default: 1e-06, on log-scale
    regressor:ard_regression:n_iter, Type: Constant, Value: 300
    regressor:ard_regression:threshold_lambda, Type: UniformFloat, Range: [1000.0, 100000.0], Default: 10000.0, on log-scale
    regressor:ard_regression:tol, Type: UniformFloat, Range: [1e-05, 0.1], Default: 0.001, on log-scale
    regressor:decision_tree:criterion, Type: Categorical, Choices: {mse, friedman_mse, mae}, Default: mse
    regressor:decision_tree:max_depth_factor, Type: UniformFloat, Range: [0.0, 2.0], Default: 0.5
    regressor:decision_tree:max_features, Type: Constant, Value: 1.0
    regressor:decision_tree:max_leaf_nodes, Type: Constant, Value: None
    regressor:decision_tree:min_impurity_decrease, Type: Constant, Value: 0.0
    regressor:decision_tree:min_samples_leaf, Type: UniformInteger, Range: [1, 20], Default: 1
    regressor:decision_tree:min_samples_split, Type: UniformInteger, Range: [2, 20], Default: 2
    regressor:decision_tree:min_weight_fraction_leaf, Type: Constant, Value: 0.0
    regressor:extra_trees:bootstrap, Type: Categorical, Choices: {True, False}, Default: False
    regressor:extra_trees:criterion, Type: Categorical, Choices: {mse, friedman_mse, mae}, Default: mse
    regressor:extra_trees:max_depth, Type: Constant, Value: None
    regressor:extra_trees:max_features, Type: UniformFloat, Range: [0.1, 1.0], Default: 1.0
    regressor:extra_trees:max_leaf_nodes, Type: Constant, Value: None
    regressor:extra_trees:min_impurity_decrease, Type: Constant, Value: 0.0
    regressor:extra_trees:min_samples_leaf, Type: UniformInteger, Range: [1, 20], Default: 1
    regressor:extra_trees:min_samples_split, Type: UniformInteger, Range: [2, 20], Default: 2
    regressor:extra_trees:min_weight_fraction_leaf, Type: Constant, Value: 0.0
    regressor:gaussian_process:alpha, Type: UniformFloat, Range: [1e-14, 1.0], Default: 1e-08, on log-scale
    regressor:gaussian_process:thetaL, Type: UniformFloat, Range: [1e-10, 0.001], Default: 1e-06, on log-scale
    regressor:gaussian_process:thetaU, Type: UniformFloat, Range: [1.0, 100000.0], Default: 100000.0, on log-scale
    regressor:gradient_boosting:early_stop, Type: Categorical, Choices: {off, valid, train}, Default: off
    regressor:gradient_boosting:l2_regularization, Type: UniformFloat, Range: [1e-10, 1.0], Default: 1e-10, on log-scale
    regressor:gradient_boosting:learning_rate, Type: UniformFloat, Range: [0.01, 1.0], Default: 0.1, on log-scale
    regressor:gradient_boosting:loss, Type: Categorical, Choices: {least_squares}, Default: least_squares
    regressor:gradient_boosting:max_bins, Type: Constant, Value: 255
    regressor:gradient_boosting:max_depth, Type: Constant, Value: None
    regressor:gradient_boosting:max_leaf_nodes, Type: UniformInteger, Range: [3, 2047], Default: 31, on log-scale
    regressor:gradient_boosting:min_samples_leaf, Type: UniformInteger, Range: [1, 200], Default: 20, on log-scale
    regressor:gradient_boosting:n_iter_no_change, Type: UniformInteger, Range: [1, 20], Default: 10
    regressor:gradient_boosting:scoring, Type: Constant, Value: loss
    regressor:gradient_boosting:tol, Type: Constant, Value: 1e-07
    regressor:gradient_boosting:validation_fraction, Type: UniformFloat, Range: [0.01, 0.4], Default: 0.1
    regressor:liblinear_svr:C, Type: UniformFloat, Range: [0.03125, 32768.0], Default: 1.0, on log-scale
    regressor:liblinear_svr:dual, Type: Constant, Value: False
    regressor:liblinear_svr:epsilon, Type: UniformFloat, Range: [0.001, 1.0], Default: 0.1, on log-scale
    regressor:liblinear_svr:fit_intercept, Type: Constant, Value: True
    regressor:liblinear_svr:intercept_scaling, Type: Constant, Value: 1
    regressor:liblinear_svr:loss, Type: Categorical, Choices: {epsilon_insensitive, squared_epsilon_insensitive}, Default: squared_epsilon_insensitive
    regressor:liblinear_svr:tol, Type: UniformFloat, Range: [1e-05, 0.1], Default: 0.0001, on log-scale
    regressor:libsvm_svr:C, Type: UniformFloat, Range: [0.03125, 32768.0], Default: 1.0, on log-scale
    regressor:libsvm_svr:coef0, Type: UniformFloat, Range: [-1.0, 1.0], Default: 0.0
    regressor:libsvm_svr:degree, Type: UniformInteger, Range: [2, 5], Default: 3
    regressor:libsvm_svr:epsilon, Type: UniformFloat, Range: [0.001, 1.0], Default: 0.1, on log-scale
    regressor:libsvm_svr:gamma, Type: UniformFloat, Range: [3.0517578125e-05, 8.0], Default: 0.1, on log-scale
    regressor:libsvm_svr:kernel, Type: Categorical, Choices: {linear, poly, rbf, sigmoid}, Default: rbf
    regressor:libsvm_svr:max_iter, Type: Constant, Value: -1
    regressor:libsvm_svr:shrinking, Type: Categorical, Choices: {True, False}, Default: True
    regressor:libsvm_svr:tol, Type: UniformFloat, Range: [1e-05, 0.1], Default: 0.001, on log-scale
    regressor:mlp:activation, Type: Categorical, Choices: {tanh, relu}, Default: tanh
    regressor:mlp:alpha, Type: UniformFloat, Range: [1e-07, 0.1], Default: 0.0001, on log-scale
    regressor:mlp:batch_size, Type: Constant, Value: auto
    regressor:mlp:beta_1, Type: Constant, Value: 0.9
    regressor:mlp:beta_2, Type: Constant, Value: 0.999
    regressor:mlp:early_stopping, Type: Categorical, Choices: {valid, train}, Default: valid
    regressor:mlp:epsilon, Type: Constant, Value: 1e-08
    regressor:mlp:hidden_layer_depth, Type: UniformInteger, Range: [1, 3], Default: 1
    regressor:mlp:learning_rate_init, Type: UniformFloat, Range: [0.0001, 0.5], Default: 0.001, on log-scale
    regressor:mlp:n_iter_no_change, Type: Constant, Value: 32
    regressor:mlp:num_nodes_per_layer, Type: UniformInteger, Range: [16, 264], Default: 32, on log-scale
    regressor:mlp:shuffle, Type: Constant, Value: True
    regressor:mlp:solver, Type: Constant, Value: adam
    regressor:mlp:tol, Type: Constant, Value: 0.0001
    regressor:mlp:validation_fraction, Type: Constant, Value: 0.1
    regressor:random_forest:bootstrap, Type: Categorical, Choices: {True, False}, Default: True
    regressor:random_forest:criterion, Type: Categorical, Choices: {mse, friedman_mse, mae}, Default: mse
    regressor:random_forest:max_depth, Type: Constant, Value: None
    regressor:random_forest:max_features, Type: UniformFloat, Range: [0.1, 1.0], Default: 1.0
    regressor:random_forest:max_leaf_nodes, Type: Constant, Value: None
    regressor:random_forest:min_impurity_decrease, Type: Constant, Value: 0.0
    regressor:random_forest:min_samples_leaf, Type: UniformInteger, Range: [1, 20], Default: 1
    regressor:random_forest:min_samples_split, Type: UniformInteger, Range: [2, 20], Default: 2
    regressor:random_forest:min_weight_fraction_leaf, Type: Constant, Value: 0.0
    regressor:sgd:alpha, Type: UniformFloat, Range: [1e-07, 0.1], Default: 0.0001, on log-scale
    regressor:sgd:average, Type: Categorical, Choices: {False, True}, Default: False
    regressor:sgd:epsilon, Type: UniformFloat, Range: [1e-05, 0.1], Default: 0.1, on log-scale
    regressor:sgd:eta0, Type: UniformFloat, Range: [1e-07, 0.1], Default: 0.01, on log-scale
    regressor:sgd:fit_intercept, Type: Constant, Value: True
    regressor:sgd:l1_ratio, Type: UniformFloat, Range: [1e-09, 1.0], Default: 0.15, on log-scale
    regressor:sgd:learning_rate, Type: Categorical, Choices: {optimal, invscaling, constant}, Default: invscaling
    regressor:sgd:loss, Type: Categorical, Choices: {squared_loss, huber, epsilon_insensitive, squared_epsilon_insensitive}, Default: squared_loss
    regressor:sgd:penalty, Type: Categorical, Choices: {l1, l2, elasticnet}, Default: l2
    regressor:sgd:power_t, Type: UniformFloat, Range: [1e-05, 1.0], Default: 0.25
    regressor:sgd:tol, Type: UniformFloat, Range: [1e-05, 0.1], Default: 0.0001, on log-scale
  Conditions:
    data_preprocessor:feature_type:numerical_transformer:imputation:strategy | data_preprocessor:__choice__ == 'feature_type'
    data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__ | data_preprocessor:__choice__ == 'feature_type'
    data_preprocessor:feature_type:numerical_transformer:rescaling:quantile_transformer:n_quantiles | data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__ == 'quantile_transformer'
    data_preprocessor:feature_type:numerical_transformer:rescaling:quantile_transformer:output_distribution | data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__ == 'quantile_transformer'
    data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_max | data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__ == 'robust_scaler'
    data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_min | data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__ == 'robust_scaler'
    feature_preprocessor:CustomFeatureAgglomeration:affinity | feature_preprocessor:__choice__ == 'CustomFeatureAgglomeration'
    feature_preprocessor:CustomFeatureAgglomeration:linkage | feature_preprocessor:__choice__ == 'CustomFeatureAgglomeration'
    feature_preprocessor:CustomFeatureAgglomeration:n_clusters | feature_preprocessor:__choice__ == 'CustomFeatureAgglomeration'
    feature_preprocessor:CustomFeatureAgglomeration:pooling_func | feature_preprocessor:__choice__ == 'CustomFeatureAgglomeration'
    feature_preprocessor:extra_trees_preproc_for_regression:bootstrap | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:extra_trees_preproc_for_regression:criterion | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:extra_trees_preproc_for_regression:max_depth | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:extra_trees_preproc_for_regression:max_features | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:extra_trees_preproc_for_regression:min_samples_leaf | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:extra_trees_preproc_for_regression:min_samples_split | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:extra_trees_preproc_for_regression:n_estimators | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:fast_ica:algorithm | feature_preprocessor:__choice__ == 'fast_ica'
    feature_preprocessor:fast_ica:fun | feature_preprocessor:__choice__ == 'fast_ica'
    feature_preprocessor:fast_ica:n_components | feature_preprocessor:fast_ica:whiten == 'True'
    feature_preprocessor:fast_ica:whiten | feature_preprocessor:__choice__ == 'fast_ica'
    feature_preprocessor:kernel_pca:coef0 | feature_preprocessor:kernel_pca:kernel in {'poly', 'sigmoid'}
    feature_preprocessor:kernel_pca:degree | feature_preprocessor:kernel_pca:kernel == 'poly'
    feature_preprocessor:kernel_pca:gamma | feature_preprocessor:kernel_pca:kernel in {'poly', 'rbf'}
    feature_preprocessor:kernel_pca:kernel | feature_preprocessor:__choice__ == 'kernel_pca'
    feature_preprocessor:kernel_pca:n_components | feature_preprocessor:__choice__ == 'kernel_pca'
    feature_preprocessor:kitchen_sinks:gamma | feature_preprocessor:__choice__ == 'kitchen_sinks'
    feature_preprocessor:kitchen_sinks:n_components | feature_preprocessor:__choice__ == 'kitchen_sinks'
    feature_preprocessor:nystroem_sampler:coef0 | feature_preprocessor:nystroem_sampler:kernel in {'poly', 'sigmoid'}
    feature_preprocessor:nystroem_sampler:degree | feature_preprocessor:nystroem_sampler:kernel == 'poly'
    feature_preprocessor:nystroem_sampler:gamma | feature_preprocessor:nystroem_sampler:kernel in {'poly', 'rbf', 'sigmoid'}
    feature_preprocessor:nystroem_sampler:kernel | feature_preprocessor:__choice__ == 'nystroem_sampler'
    feature_preprocessor:nystroem_sampler:n_components | feature_preprocessor:__choice__ == 'nystroem_sampler'
    feature_preprocessor:pca:keep_variance | feature_preprocessor:__choice__ == 'pca'
    feature_preprocessor:pca:whiten | feature_preprocessor:__choice__ == 'pca'
    feature_preprocessor:polynomial:degree | feature_preprocessor:__choice__ == 'polynomial'
    feature_preprocessor:polynomial:include_bias | feature_preprocessor:__choice__ == 'polynomial'
    feature_preprocessor:polynomial:interaction_only | feature_preprocessor:__choice__ == 'polynomial'
    feature_preprocessor:random_trees_embedding:bootstrap | feature_preprocessor:__choice__ == 'random_trees_embedding'
    feature_preprocessor:random_trees_embedding:max_depth | feature_preprocessor:__choice__ == 'random_trees_embedding'
    feature_preprocessor:random_trees_embedding:max_leaf_nodes | feature_preprocessor:__choice__ == 'random_trees_embedding'
    feature_preprocessor:random_trees_embedding:min_samples_leaf | feature_preprocessor:__choice__ == 'random_trees_embedding'
    feature_preprocessor:random_trees_embedding:min_samples_split | feature_preprocessor:__choice__ == 'random_trees_embedding'
    feature_preprocessor:random_trees_embedding:min_weight_fraction_leaf | feature_preprocessor:__choice__ == 'random_trees_embedding'
    feature_preprocessor:random_trees_embedding:n_estimators | feature_preprocessor:__choice__ == 'random_trees_embedding'
    feature_preprocessor:select_percentile_regression:percentile | feature_preprocessor:__choice__ == 'select_percentile_regression'
    feature_preprocessor:select_percentile_regression:score_func | feature_preprocessor:__choice__ == 'select_percentile_regression'
    feature_preprocessor:select_rates_regression:alpha | feature_preprocessor:__choice__ == 'select_rates_regression'
    feature_preprocessor:select_rates_regression:mode | feature_preprocessor:__choice__ == 'select_rates_regression'
    feature_preprocessor:select_rates_regression:score_func | feature_preprocessor:__choice__ == 'select_rates_regression'
    regressor:CustomKNearestNeighborsRegressor:n_neighbors | regressor:__choice__ == 'CustomKNearestNeighborsRegressor'
    regressor:CustomKNearestNeighborsRegressor:p | regressor:__choice__ == 'CustomKNearestNeighborsRegressor'
    regressor:CustomKNearestNeighborsRegressor:weights | regressor:__choice__ == 'CustomKNearestNeighborsRegressor'
    regressor:CustomKernelRidgeRegression:alpha | regressor:__choice__ == 'CustomKernelRidgeRegression'
    regressor:CustomKernelRidgeRegression:coef0 | regressor:CustomKernelRidgeRegression:kernel == 'polynomial'
    regressor:CustomKernelRidgeRegression:degree | regressor:CustomKernelRidgeRegression:kernel == 'polynomial'
    regressor:CustomKernelRidgeRegression:gamma | regressor:__choice__ == 'CustomKernelRidgeRegression'
    regressor:CustomKernelRidgeRegression:kernel | regressor:__choice__ == 'CustomKernelRidgeRegression'
    regressor:adaboost:learning_rate | regressor:__choice__ == 'adaboost'
    regressor:adaboost:loss | regressor:__choice__ == 'adaboost'
    regressor:adaboost:max_depth | regressor:__choice__ == 'adaboost'
    regressor:adaboost:n_estimators | regressor:__choice__ == 'adaboost'
    regressor:ard_regression:alpha_1 | regressor:__choice__ == 'ard_regression'
    regressor:ard_regression:alpha_2 | regressor:__choice__ == 'ard_regression'
    regressor:ard_regression:fit_intercept | regressor:__choice__ == 'ard_regression'
    regressor:ard_regression:lambda_1 | regressor:__choice__ == 'ard_regression'
    regressor:ard_regression:lambda_2 | regressor:__choice__ == 'ard_regression'
    regressor:ard_regression:n_iter | regressor:__choice__ == 'ard_regression'
    regressor:ard_regression:threshold_lambda | regressor:__choice__ == 'ard_regression'
    regressor:ard_regression:tol | regressor:__choice__ == 'ard_regression'
    regressor:decision_tree:criterion | regressor:__choice__ == 'decision_tree'
    regressor:decision_tree:max_depth_factor | regressor:__choice__ == 'decision_tree'
    regressor:decision_tree:max_features | regressor:__choice__ == 'decision_tree'
    regressor:decision_tree:max_leaf_nodes | regressor:__choice__ == 'decision_tree'
    regressor:decision_tree:min_impurity_decrease | regressor:__choice__ == 'decision_tree'
    regressor:decision_tree:min_samples_leaf | regressor:__choice__ == 'decision_tree'
    regressor:decision_tree:min_samples_split | regressor:__choice__ == 'decision_tree'
    regressor:decision_tree:min_weight_fraction_leaf | regressor:__choice__ == 'decision_tree'
    regressor:extra_trees:bootstrap | regressor:__choice__ == 'extra_trees'
    regressor:extra_trees:criterion | regressor:__choice__ == 'extra_trees'
    regressor:extra_trees:max_depth | regressor:__choice__ == 'extra_trees'
    regressor:extra_trees:max_features | regressor:__choice__ == 'extra_trees'
    regressor:extra_trees:max_leaf_nodes | regressor:__choice__ == 'extra_trees'
    regressor:extra_trees:min_impurity_decrease | regressor:__choice__ == 'extra_trees'
    regressor:extra_trees:min_samples_leaf | regressor:__choice__ == 'extra_trees'
    regressor:extra_trees:min_samples_split | regressor:__choice__ == 'extra_trees'
    regressor:extra_trees:min_weight_fraction_leaf | regressor:__choice__ == 'extra_trees'
    regressor:gaussian_process:alpha | regressor:__choice__ == 'gaussian_process'
    regressor:gaussian_process:thetaL | regressor:__choice__ == 'gaussian_process'
    regressor:gaussian_process:thetaU | regressor:__choice__ == 'gaussian_process'
    regressor:gradient_boosting:early_stop | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:l2_regularization | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:learning_rate | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:loss | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:max_bins | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:max_depth | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:max_leaf_nodes | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:min_samples_leaf | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:n_iter_no_change | regressor:gradient_boosting:early_stop in {'valid', 'train'}
    regressor:gradient_boosting:scoring | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:tol | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:validation_fraction | regressor:gradient_boosting:early_stop == 'valid'
    regressor:liblinear_svr:C | regressor:__choice__ == 'liblinear_svr'
    regressor:liblinear_svr:dual | regressor:__choice__ == 'liblinear_svr'
    regressor:liblinear_svr:epsilon | regressor:__choice__ == 'liblinear_svr'
    regressor:liblinear_svr:fit_intercept | regressor:__choice__ == 'liblinear_svr'
    regressor:liblinear_svr:intercept_scaling | regressor:__choice__ == 'liblinear_svr'
    regressor:liblinear_svr:loss | regressor:__choice__ == 'liblinear_svr'
    regressor:liblinear_svr:tol | regressor:__choice__ == 'liblinear_svr'
    regressor:libsvm_svr:C | regressor:__choice__ == 'libsvm_svr'
    regressor:libsvm_svr:coef0 | regressor:libsvm_svr:kernel in {'poly', 'sigmoid'}
    regressor:libsvm_svr:degree | regressor:libsvm_svr:kernel == 'poly'
    regressor:libsvm_svr:epsilon | regressor:__choice__ == 'libsvm_svr'
    regressor:libsvm_svr:gamma | regressor:libsvm_svr:kernel in {'poly', 'rbf'}
    regressor:libsvm_svr:kernel | regressor:__choice__ == 'libsvm_svr'
    regressor:libsvm_svr:max_iter | regressor:__choice__ == 'libsvm_svr'
    regressor:libsvm_svr:shrinking | regressor:__choice__ == 'libsvm_svr'
    regressor:libsvm_svr:tol | regressor:__choice__ == 'libsvm_svr'
    regressor:mlp:activation | regressor:__choice__ == 'mlp'
    regressor:mlp:alpha | regressor:__choice__ == 'mlp'
    regressor:mlp:batch_size | regressor:__choice__ == 'mlp'
    regressor:mlp:beta_1 | regressor:__choice__ == 'mlp'
    regressor:mlp:beta_2 | regressor:__choice__ == 'mlp'
    regressor:mlp:early_stopping | regressor:__choice__ == 'mlp'
    regressor:mlp:epsilon | regressor:__choice__ == 'mlp'
    regressor:mlp:hidden_layer_depth | regressor:__choice__ == 'mlp'
    regressor:mlp:learning_rate_init | regressor:__choice__ == 'mlp'
    regressor:mlp:n_iter_no_change | regressor:__choice__ == 'mlp'
    regressor:mlp:num_nodes_per_layer | regressor:__choice__ == 'mlp'
    regressor:mlp:shuffle | regressor:__choice__ == 'mlp'
    regressor:mlp:solver | regressor:__choice__ == 'mlp'
    regressor:mlp:tol | regressor:__choice__ == 'mlp'
    regressor:mlp:validation_fraction | regressor:mlp:early_stopping in {'valid'}
    regressor:random_forest:bootstrap | regressor:__choice__ == 'random_forest'
    regressor:random_forest:criterion | regressor:__choice__ == 'random_forest'
    regressor:random_forest:max_depth | regressor:__choice__ == 'random_forest'
    regressor:random_forest:max_features | regressor:__choice__ == 'random_forest'
    regressor:random_forest:max_leaf_nodes | regressor:__choice__ == 'random_forest'
    regressor:random_forest:min_impurity_decrease | regressor:__choice__ == 'random_forest'
    regressor:random_forest:min_samples_leaf | regressor:__choice__ == 'random_forest'
    regressor:random_forest:min_samples_split | regressor:__choice__ == 'random_forest'
    regressor:random_forest:min_weight_fraction_leaf | regressor:__choice__ == 'random_forest'
    regressor:sgd:alpha | regressor:__choice__ == 'sgd'
    regressor:sgd:average | regressor:__choice__ == 'sgd'
    regressor:sgd:epsilon | regressor:sgd:loss in {'huber', 'epsilon_insensitive', 'squared_epsilon_insensitive'}
    regressor:sgd:eta0 | regressor:sgd:learning_rate in {'invscaling', 'constant'}
    regressor:sgd:fit_intercept | regressor:__choice__ == 'sgd'
    regressor:sgd:l1_ratio | regressor:sgd:penalty == 'elasticnet'
    regressor:sgd:learning_rate | regressor:__choice__ == 'sgd'
    regressor:sgd:loss | regressor:__choice__ == 'sgd'
    regressor:sgd:penalty | regressor:__choice__ == 'sgd'
    regressor:sgd:power_t | regressor:sgd:learning_rate == 'invscaling'
    regressor:sgd:tol | regressor:__choice__ == 'sgd'
  Forbidden Clauses:
    (Forbidden: feature_preprocessor:CustomFeatureAgglomeration:affinity in {'cosine', 'manhattan'} && Forbidden: feature_preprocessor:CustomFeatureAgglomeration:linkage == 'ward')
    (Forbidden: regressor:liblinear_svr:dual == 'False' && Forbidden: regressor:liblinear_svr:loss == 'epsilon_insensitive')
    (Forbidden: feature_preprocessor:__choice__ == 'random_trees_embedding' && Forbidden: regressor:__choice__ == 'ard_regression')
    (Forbidden: feature_preprocessor:__choice__ == 'random_trees_embedding' && Forbidden: regressor:__choice__ == 'gaussian_process')
    (Forbidden: feature_preprocessor:__choice__ == 'random_trees_embedding' && Forbidden: regressor:__choice__ == 'gradient_boosting')
    (Forbidden: regressor:__choice__ == 'adaboost' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'adaboost' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'adaboost' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')
    (Forbidden: regressor:__choice__ == 'ard_regression' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'ard_regression' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'ard_regression' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')
    (Forbidden: regressor:__choice__ == 'decision_tree' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'decision_tree' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'decision_tree' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')
    (Forbidden: regressor:__choice__ == 'extra_trees' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'extra_trees' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'extra_trees' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')
    (Forbidden: regressor:__choice__ == 'gaussian_process' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'gaussian_process' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'gaussian_process' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')
    (Forbidden: regressor:__choice__ == 'gradient_boosting' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'gradient_boosting' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'gradient_boosting' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')
    (Forbidden: regressor:__choice__ == 'libsvm_svr' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'libsvm_svr' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'libsvm_svr' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')
    (Forbidden: regressor:__choice__ == 'mlp' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'mlp' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'mlp' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')
    (Forbidden: regressor:__choice__ == 'random_forest' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'random_forest' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'random_forest' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')

[WARNING] [2022-11-28 12:08:33,281:Client-AutoMLSMBO(1)::food] Configuration 140 not found
[WARNING] [2022-11-28 12:08:33,281:Client-AutoMLSMBO(1)::food] Configuration 98 not found
[WARNING] [2022-11-28 12:08:33,281:Client-AutoMLSMBO(1)::food] Configuration 171 not found
[WARNING] [2022-11-28 12:08:33,282:Client-AutoMLSMBO(1)::food] Configuration 258 not found
[WARNING] [2022-11-28 12:08:33,283:Client-AutoMLSMBO(1)::food] Configuration 186 not found
[WARNING] [2022-11-28 12:08:33,283:Client-AutoMLSMBO(1)::food] Configuration 28 not found
[WARNING] [2022-11-28 12:08:33,284:Client-AutoMLSMBO(1)::food] Configuration 73 not found
[WARNING] [2022-11-28 12:08:33,284:Client-AutoMLSMBO(1)::food] Configuration 279 not found
[WARNING] [2022-11-28 12:08:33,284:Client-AutoMLSMBO(1)::food] Configuration 126 not found
[WARNING] [2022-11-28 12:08:33,284:Client-AutoMLSMBO(1)::food] Configuration 107 not found
automl.leaderboard()
          rank  ensemble_weight            type      cost  duration
model_id                                                           
265          1             0.54  ard_regression  0.478524  3.176164
240          2             0.46  ard_regression  0.481069  4.636544
automl.show_models()
{   240: {   'cost': 0.48106924766239245,
             'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x14a485f457c0>,
             'ensemble_weight': 0.46,
             'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x14a4860b1460>,
             'model_id': 240,
             'rank': 1,
             'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x14a4860b14f0>,
             'sklearn_regressor': None},
    265: {   'cost': 0.47852426356533195,
             'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x14a486167700>,
             'ensemble_weight': 0.54,
             'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x14a4861d3fd0>,
             'model_id': 265,
             'rank': 2,
             'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x14a486033a30>,
             'sklearn_regressor': None}}
Best Ensemble models
[{'cost_0.48106924766239245_ensembleWeight_0.46': Configuration(values={
  'data_preprocessor:__choice__': 'feature_type',
  'data_preprocessor:feature_type:numerical_transformer:imputation:strategy': 'mean',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__': 'quantile_transformer',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:quantile_transformer:n_quantiles': 1860,
  'data_preprocessor:feature_type:numerical_transformer:rescaling:quantile_transformer:output_distribution': 'uniform',
  'feature_preprocessor:__choice__': 'select_percentile_regression',
  'feature_preprocessor:select_percentile_regression:percentile': 24.778629275039386,
  'feature_preprocessor:select_percentile_regression:score_func': 'f_regression',
  'regressor:__choice__': 'ard_regression',
  'regressor:ard_regression:alpha_1': 0.0003787864689077789,
  'regressor:ard_regression:alpha_2': 6.206399703864863e-10,
  'regressor:ard_regression:fit_intercept': 'True',
  'regressor:ard_regression:lambda_1': 3.3139587276585133e-06,
  'regressor:ard_regression:lambda_2': 1.3867005046159186e-09,
  'regressor:ard_regression:n_iter': 300,
  'regressor:ard_regression:threshold_lambda': 4714.075047368049,
  'regressor:ard_regression:tol': 0.0010692410414264854,
})
}, {'cost_0.47852426356533195_ensembleWeight_0.54': Configuration(values={
  'data_preprocessor:__choice__': 'feature_type',
  'data_preprocessor:feature_type:numerical_transformer:imputation:strategy': 'mean',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__': 'robust_scaler',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_max': 0.728455525948153,
  'data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_min': 0.0749391558621574,
  'feature_preprocessor:__choice__': 'select_rates_regression',
  'feature_preprocessor:select_rates_regression:alpha': 0.08516864473393725,
  'feature_preprocessor:select_rates_regression:mode': 'fpr',
  'feature_preprocessor:select_rates_regression:score_func': 'f_regression',
  'regressor:__choice__': 'ard_regression',
  'regressor:ard_regression:alpha_1': 3.129712599841959e-05,
  'regressor:ard_regression:alpha_2': 8.734386945412202e-07,
  'regressor:ard_regression:fit_intercept': 'True',
  'regressor:ard_regression:lambda_1': 5.2581730920027225e-06,
  'regressor:ard_regression:lambda_2': 1.0000000000000004e-06,
  'regressor:ard_regression:n_iter': 300,
  'regressor:ard_regression:threshold_lambda': 5763.817200977586,
  'regressor:ard_regression:tol': 0.0013113795932491326,
})
}]
Error: Cannot find Jupyter/Colab namespace for Python
Error: Cannot find Jupyter/Colab namespace for Python
Error: Cannot find Jupyter/Colab namespace for Python
All models in order
