CustomFeatureAgglomeration
CustomKernelRidgeRegression
Configuration space object:
  Hyperparameters:
    data_preprocessor:__choice__, Type: Categorical, Choices: {feature_type}, Default: feature_type
    data_preprocessor:feature_type:numerical_transformer:imputation:strategy, Type: Categorical, Choices: {mean, median, most_frequent}, Default: mean
    data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__, Type: Categorical, Choices: {minmax, none, normalize, power_transformer, quantile_transformer, robust_scaler, standardize}, Default: standardize
    data_preprocessor:feature_type:numerical_transformer:rescaling:quantile_transformer:n_quantiles, Type: UniformInteger, Range: [10, 2000], Default: 1000
    data_preprocessor:feature_type:numerical_transformer:rescaling:quantile_transformer:output_distribution, Type: Categorical, Choices: {normal, uniform}, Default: normal
    data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_max, Type: UniformFloat, Range: [0.7, 0.999], Default: 0.75
    data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_min, Type: UniformFloat, Range: [0.001, 0.3], Default: 0.25
    feature_preprocessor:CustomFeatureAgglomeration:affinity, Type: Categorical, Choices: {euclidean, manhattan, cosine}, Default: euclidean
    feature_preprocessor:CustomFeatureAgglomeration:linkage, Type: Categorical, Choices: {ward, complete, average}, Default: ward
    feature_preprocessor:CustomFeatureAgglomeration:n_clusters, Type: UniformInteger, Range: [2, 30], Default: 2
    feature_preprocessor:CustomFeatureAgglomeration:pooling_func, Type: Categorical, Choices: {mean, median, max}, Default: mean
    feature_preprocessor:__choice__, Type: Categorical, Choices: {extra_trees_preproc_for_regression, fast_ica, kernel_pca, kitchen_sinks, no_preprocessing, nystroem_sampler, pca, polynomial, random_trees_embedding, select_percentile_regression, select_rates_regression, CustomFeatureAgglomeration}, Default: no_preprocessing
    feature_preprocessor:extra_trees_preproc_for_regression:bootstrap, Type: Categorical, Choices: {True, False}, Default: False
    feature_preprocessor:extra_trees_preproc_for_regression:criterion, Type: Categorical, Choices: {mse, friedman_mse, mae}, Default: mse
    feature_preprocessor:extra_trees_preproc_for_regression:max_depth, Type: Constant, Value: None
    feature_preprocessor:extra_trees_preproc_for_regression:max_features, Type: UniformFloat, Range: [0.1, 1.0], Default: 1.0
    feature_preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes, Type: Constant, Value: None
    feature_preprocessor:extra_trees_preproc_for_regression:min_samples_leaf, Type: UniformInteger, Range: [1, 20], Default: 1
    feature_preprocessor:extra_trees_preproc_for_regression:min_samples_split, Type: UniformInteger, Range: [2, 20], Default: 2
    feature_preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf, Type: Constant, Value: 0.0
    feature_preprocessor:extra_trees_preproc_for_regression:n_estimators, Type: Constant, Value: 100
    feature_preprocessor:fast_ica:algorithm, Type: Categorical, Choices: {parallel, deflation}, Default: parallel
    feature_preprocessor:fast_ica:fun, Type: Categorical, Choices: {logcosh, exp, cube}, Default: logcosh
    feature_preprocessor:fast_ica:n_components, Type: UniformInteger, Range: [10, 2000], Default: 100
    feature_preprocessor:fast_ica:whiten, Type: Categorical, Choices: {False, True}, Default: False
    feature_preprocessor:kernel_pca:coef0, Type: UniformFloat, Range: [-1.0, 1.0], Default: 0.0
    feature_preprocessor:kernel_pca:degree, Type: UniformInteger, Range: [2, 5], Default: 3
    feature_preprocessor:kernel_pca:gamma, Type: UniformFloat, Range: [3.0517578125e-05, 8.0], Default: 0.01, on log-scale
    feature_preprocessor:kernel_pca:kernel, Type: Categorical, Choices: {poly, rbf, sigmoid, cosine}, Default: rbf
    feature_preprocessor:kernel_pca:n_components, Type: UniformInteger, Range: [10, 2000], Default: 100
    feature_preprocessor:kitchen_sinks:gamma, Type: UniformFloat, Range: [3.0517578125e-05, 8.0], Default: 1.0, on log-scale
    feature_preprocessor:kitchen_sinks:n_components, Type: UniformInteger, Range: [50, 10000], Default: 100, on log-scale
    feature_preprocessor:nystroem_sampler:coef0, Type: UniformFloat, Range: [-1.0, 1.0], Default: 0.0
    feature_preprocessor:nystroem_sampler:degree, Type: UniformInteger, Range: [2, 5], Default: 3
    feature_preprocessor:nystroem_sampler:gamma, Type: UniformFloat, Range: [3.0517578125e-05, 8.0], Default: 0.1, on log-scale
    feature_preprocessor:nystroem_sampler:kernel, Type: Categorical, Choices: {poly, rbf, sigmoid, cosine}, Default: rbf
    feature_preprocessor:nystroem_sampler:n_components, Type: UniformInteger, Range: [50, 10000], Default: 100, on log-scale
    feature_preprocessor:pca:keep_variance, Type: UniformFloat, Range: [0.5, 0.9999], Default: 0.9999
    feature_preprocessor:pca:whiten, Type: Categorical, Choices: {False, True}, Default: False
    feature_preprocessor:polynomial:degree, Type: UniformInteger, Range: [2, 3], Default: 2
    feature_preprocessor:polynomial:include_bias, Type: Categorical, Choices: {True, False}, Default: True
    feature_preprocessor:polynomial:interaction_only, Type: Categorical, Choices: {False, True}, Default: False
    feature_preprocessor:random_trees_embedding:bootstrap, Type: Categorical, Choices: {True, False}, Default: True
    feature_preprocessor:random_trees_embedding:max_depth, Type: UniformInteger, Range: [2, 10], Default: 5
    feature_preprocessor:random_trees_embedding:max_leaf_nodes, Type: Constant, Value: None
    feature_preprocessor:random_trees_embedding:min_samples_leaf, Type: UniformInteger, Range: [1, 20], Default: 1
    feature_preprocessor:random_trees_embedding:min_samples_split, Type: UniformInteger, Range: [2, 20], Default: 2
    feature_preprocessor:random_trees_embedding:min_weight_fraction_leaf, Type: Constant, Value: 1.0
    feature_preprocessor:random_trees_embedding:n_estimators, Type: UniformInteger, Range: [10, 100], Default: 10
    feature_preprocessor:select_percentile_regression:percentile, Type: UniformFloat, Range: [1.0, 99.0], Default: 50.0
    feature_preprocessor:select_percentile_regression:score_func, Type: Categorical, Choices: {f_regression, mutual_info}, Default: f_regression
    feature_preprocessor:select_rates_regression:alpha, Type: UniformFloat, Range: [0.01, 0.5], Default: 0.1
    feature_preprocessor:select_rates_regression:mode, Type: Categorical, Choices: {fpr, fdr, fwe}, Default: fpr
    feature_preprocessor:select_rates_regression:score_func, Type: Categorical, Choices: {f_regression}, Default: f_regression
    regressor:CustomKernelRidgeRegression:alpha, Type: UniformFloat, Range: [1e-05, 1.0], Default: 1.0, on log-scale
    regressor:CustomKernelRidgeRegression:coef0, Type: UniformFloat, Range: [0.01, 100.0], Default: 1.0, on log-scale
    regressor:CustomKernelRidgeRegression:degree, Type: UniformInteger, Range: [2, 5], Default: 3
    regressor:CustomKernelRidgeRegression:gamma, Type: UniformFloat, Range: [1e-05, 1.0], Default: 0.1, on log-scale
    regressor:CustomKernelRidgeRegression:kernel, Type: Categorical, Choices: {polynomial, rbf}, Default: polynomial
    regressor:__choice__, Type: Categorical, Choices: {adaboost, ard_regression, decision_tree, extra_trees, gaussian_process, gradient_boosting, k_nearest_neighbors, liblinear_svr, libsvm_svr, mlp, random_forest, sgd, CustomKernelRidgeRegression}, Default: random_forest
    regressor:adaboost:learning_rate, Type: UniformFloat, Range: [0.01, 2.0], Default: 0.1, on log-scale
    regressor:adaboost:loss, Type: Categorical, Choices: {linear, square, exponential}, Default: linear
    regressor:adaboost:max_depth, Type: UniformInteger, Range: [1, 10], Default: 1
    regressor:adaboost:n_estimators, Type: UniformInteger, Range: [50, 500], Default: 50
    regressor:ard_regression:alpha_1, Type: UniformFloat, Range: [1e-10, 0.001], Default: 1e-06
    regressor:ard_regression:alpha_2, Type: UniformFloat, Range: [1e-10, 0.001], Default: 1e-06, on log-scale
    regressor:ard_regression:fit_intercept, Type: Constant, Value: True
    regressor:ard_regression:lambda_1, Type: UniformFloat, Range: [1e-10, 0.001], Default: 1e-06, on log-scale
    regressor:ard_regression:lambda_2, Type: UniformFloat, Range: [1e-10, 0.001], Default: 1e-06, on log-scale
    regressor:ard_regression:n_iter, Type: Constant, Value: 300
    regressor:ard_regression:threshold_lambda, Type: UniformFloat, Range: [1000.0, 100000.0], Default: 10000.0, on log-scale
    regressor:ard_regression:tol, Type: UniformFloat, Range: [1e-05, 0.1], Default: 0.001, on log-scale
    regressor:decision_tree:criterion, Type: Categorical, Choices: {mse, friedman_mse, mae}, Default: mse
    regressor:decision_tree:max_depth_factor, Type: UniformFloat, Range: [0.0, 2.0], Default: 0.5
    regressor:decision_tree:max_features, Type: Constant, Value: 1.0
    regressor:decision_tree:max_leaf_nodes, Type: Constant, Value: None
    regressor:decision_tree:min_impurity_decrease, Type: Constant, Value: 0.0
    regressor:decision_tree:min_samples_leaf, Type: UniformInteger, Range: [1, 20], Default: 1
    regressor:decision_tree:min_samples_split, Type: UniformInteger, Range: [2, 20], Default: 2
    regressor:decision_tree:min_weight_fraction_leaf, Type: Constant, Value: 0.0
    regressor:extra_trees:bootstrap, Type: Categorical, Choices: {True, False}, Default: False
    regressor:extra_trees:criterion, Type: Categorical, Choices: {mse, friedman_mse, mae}, Default: mse
    regressor:extra_trees:max_depth, Type: Constant, Value: None
    regressor:extra_trees:max_features, Type: UniformFloat, Range: [0.1, 1.0], Default: 1.0
    regressor:extra_trees:max_leaf_nodes, Type: Constant, Value: None
    regressor:extra_trees:min_impurity_decrease, Type: Constant, Value: 0.0
    regressor:extra_trees:min_samples_leaf, Type: UniformInteger, Range: [1, 20], Default: 1
    regressor:extra_trees:min_samples_split, Type: UniformInteger, Range: [2, 20], Default: 2
    regressor:extra_trees:min_weight_fraction_leaf, Type: Constant, Value: 0.0
    regressor:gaussian_process:alpha, Type: UniformFloat, Range: [1e-14, 1.0], Default: 1e-08, on log-scale
    regressor:gaussian_process:thetaL, Type: UniformFloat, Range: [1e-10, 0.001], Default: 1e-06, on log-scale
    regressor:gaussian_process:thetaU, Type: UniformFloat, Range: [1.0, 100000.0], Default: 100000.0, on log-scale
    regressor:gradient_boosting:early_stop, Type: Categorical, Choices: {off, valid, train}, Default: off
    regressor:gradient_boosting:l2_regularization, Type: UniformFloat, Range: [1e-10, 1.0], Default: 1e-10, on log-scale
    regressor:gradient_boosting:learning_rate, Type: UniformFloat, Range: [0.01, 1.0], Default: 0.1, on log-scale
    regressor:gradient_boosting:loss, Type: Categorical, Choices: {least_squares}, Default: least_squares
    regressor:gradient_boosting:max_bins, Type: Constant, Value: 255
    regressor:gradient_boosting:max_depth, Type: Constant, Value: None
    regressor:gradient_boosting:max_leaf_nodes, Type: UniformInteger, Range: [3, 2047], Default: 31, on log-scale
    regressor:gradient_boosting:min_samples_leaf, Type: UniformInteger, Range: [1, 200], Default: 20, on log-scale
    regressor:gradient_boosting:n_iter_no_change, Type: UniformInteger, Range: [1, 20], Default: 10
    regressor:gradient_boosting:scoring, Type: Constant, Value: loss
    regressor:gradient_boosting:tol, Type: Constant, Value: 1e-07
    regressor:gradient_boosting:validation_fraction, Type: UniformFloat, Range: [0.01, 0.4], Default: 0.1
    regressor:k_nearest_neighbors:n_neighbors, Type: UniformInteger, Range: [1, 100], Default: 1, on log-scale
    regressor:k_nearest_neighbors:p, Type: Categorical, Choices: {1, 2}, Default: 2
    regressor:k_nearest_neighbors:weights, Type: Categorical, Choices: {uniform, distance}, Default: uniform
    regressor:liblinear_svr:C, Type: UniformFloat, Range: [0.03125, 32768.0], Default: 1.0, on log-scale
    regressor:liblinear_svr:dual, Type: Constant, Value: False
    regressor:liblinear_svr:epsilon, Type: UniformFloat, Range: [0.001, 1.0], Default: 0.1, on log-scale
    regressor:liblinear_svr:fit_intercept, Type: Constant, Value: True
    regressor:liblinear_svr:intercept_scaling, Type: Constant, Value: 1
    regressor:liblinear_svr:loss, Type: Categorical, Choices: {epsilon_insensitive, squared_epsilon_insensitive}, Default: squared_epsilon_insensitive
    regressor:liblinear_svr:tol, Type: UniformFloat, Range: [1e-05, 0.1], Default: 0.0001, on log-scale
    regressor:libsvm_svr:C, Type: UniformFloat, Range: [0.03125, 32768.0], Default: 1.0, on log-scale
    regressor:libsvm_svr:coef0, Type: UniformFloat, Range: [-1.0, 1.0], Default: 0.0
    regressor:libsvm_svr:degree, Type: UniformInteger, Range: [2, 5], Default: 3
    regressor:libsvm_svr:epsilon, Type: UniformFloat, Range: [0.001, 1.0], Default: 0.1, on log-scale
    regressor:libsvm_svr:gamma, Type: UniformFloat, Range: [3.0517578125e-05, 8.0], Default: 0.1, on log-scale
    regressor:libsvm_svr:kernel, Type: Categorical, Choices: {linear, poly, rbf, sigmoid}, Default: rbf
    regressor:libsvm_svr:max_iter, Type: Constant, Value: -1
    regressor:libsvm_svr:shrinking, Type: Categorical, Choices: {True, False}, Default: True
    regressor:libsvm_svr:tol, Type: UniformFloat, Range: [1e-05, 0.1], Default: 0.001, on log-scale
    regressor:mlp:activation, Type: Categorical, Choices: {tanh, relu}, Default: tanh
    regressor:mlp:alpha, Type: UniformFloat, Range: [1e-07, 0.1], Default: 0.0001, on log-scale
    regressor:mlp:batch_size, Type: Constant, Value: auto
    regressor:mlp:beta_1, Type: Constant, Value: 0.9
    regressor:mlp:beta_2, Type: Constant, Value: 0.999
    regressor:mlp:early_stopping, Type: Categorical, Choices: {valid, train}, Default: valid
    regressor:mlp:epsilon, Type: Constant, Value: 1e-08
    regressor:mlp:hidden_layer_depth, Type: UniformInteger, Range: [1, 3], Default: 1
    regressor:mlp:learning_rate_init, Type: UniformFloat, Range: [0.0001, 0.5], Default: 0.001, on log-scale
    regressor:mlp:n_iter_no_change, Type: Constant, Value: 32
    regressor:mlp:num_nodes_per_layer, Type: UniformInteger, Range: [16, 264], Default: 32, on log-scale
    regressor:mlp:shuffle, Type: Constant, Value: True
    regressor:mlp:solver, Type: Constant, Value: adam
    regressor:mlp:tol, Type: Constant, Value: 0.0001
    regressor:mlp:validation_fraction, Type: Constant, Value: 0.1
    regressor:random_forest:bootstrap, Type: Categorical, Choices: {True, False}, Default: True
    regressor:random_forest:criterion, Type: Categorical, Choices: {mse, friedman_mse, mae}, Default: mse
    regressor:random_forest:max_depth, Type: Constant, Value: None
    regressor:random_forest:max_features, Type: UniformFloat, Range: [0.1, 1.0], Default: 1.0
    regressor:random_forest:max_leaf_nodes, Type: Constant, Value: None
    regressor:random_forest:min_impurity_decrease, Type: Constant, Value: 0.0
    regressor:random_forest:min_samples_leaf, Type: UniformInteger, Range: [1, 20], Default: 1
    regressor:random_forest:min_samples_split, Type: UniformInteger, Range: [2, 20], Default: 2
    regressor:random_forest:min_weight_fraction_leaf, Type: Constant, Value: 0.0
    regressor:sgd:alpha, Type: UniformFloat, Range: [1e-07, 0.1], Default: 0.0001, on log-scale
    regressor:sgd:average, Type: Categorical, Choices: {False, True}, Default: False
    regressor:sgd:epsilon, Type: UniformFloat, Range: [1e-05, 0.1], Default: 0.1, on log-scale
    regressor:sgd:eta0, Type: UniformFloat, Range: [1e-07, 0.1], Default: 0.01, on log-scale
    regressor:sgd:fit_intercept, Type: Constant, Value: True
    regressor:sgd:l1_ratio, Type: UniformFloat, Range: [1e-09, 1.0], Default: 0.15, on log-scale
    regressor:sgd:learning_rate, Type: Categorical, Choices: {optimal, invscaling, constant}, Default: invscaling
    regressor:sgd:loss, Type: Categorical, Choices: {squared_loss, huber, epsilon_insensitive, squared_epsilon_insensitive}, Default: squared_loss
    regressor:sgd:penalty, Type: Categorical, Choices: {l1, l2, elasticnet}, Default: l2
    regressor:sgd:power_t, Type: UniformFloat, Range: [1e-05, 1.0], Default: 0.25
    regressor:sgd:tol, Type: UniformFloat, Range: [1e-05, 0.1], Default: 0.0001, on log-scale
  Conditions:
    data_preprocessor:feature_type:numerical_transformer:imputation:strategy | data_preprocessor:__choice__ == 'feature_type'
    data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__ | data_preprocessor:__choice__ == 'feature_type'
    data_preprocessor:feature_type:numerical_transformer:rescaling:quantile_transformer:n_quantiles | data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__ == 'quantile_transformer'
    data_preprocessor:feature_type:numerical_transformer:rescaling:quantile_transformer:output_distribution | data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__ == 'quantile_transformer'
    data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_max | data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__ == 'robust_scaler'
    data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_min | data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__ == 'robust_scaler'
    feature_preprocessor:CustomFeatureAgglomeration:affinity | feature_preprocessor:__choice__ == 'CustomFeatureAgglomeration'
    feature_preprocessor:CustomFeatureAgglomeration:linkage | feature_preprocessor:__choice__ == 'CustomFeatureAgglomeration'
    feature_preprocessor:CustomFeatureAgglomeration:n_clusters | feature_preprocessor:__choice__ == 'CustomFeatureAgglomeration'
    feature_preprocessor:CustomFeatureAgglomeration:pooling_func | feature_preprocessor:__choice__ == 'CustomFeatureAgglomeration'
    feature_preprocessor:extra_trees_preproc_for_regression:bootstrap | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:extra_trees_preproc_for_regression:criterion | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:extra_trees_preproc_for_regression:max_depth | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:extra_trees_preproc_for_regression:max_features | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:extra_trees_preproc_for_regression:min_samples_leaf | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:extra_trees_preproc_for_regression:min_samples_split | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:extra_trees_preproc_for_regression:n_estimators | feature_preprocessor:__choice__ == 'extra_trees_preproc_for_regression'
    feature_preprocessor:fast_ica:algorithm | feature_preprocessor:__choice__ == 'fast_ica'
    feature_preprocessor:fast_ica:fun | feature_preprocessor:__choice__ == 'fast_ica'
    feature_preprocessor:fast_ica:n_components | feature_preprocessor:fast_ica:whiten == 'True'
    feature_preprocessor:fast_ica:whiten | feature_preprocessor:__choice__ == 'fast_ica'
    feature_preprocessor:kernel_pca:coef0 | feature_preprocessor:kernel_pca:kernel in {'poly', 'sigmoid'}
    feature_preprocessor:kernel_pca:degree | feature_preprocessor:kernel_pca:kernel == 'poly'
    feature_preprocessor:kernel_pca:gamma | feature_preprocessor:kernel_pca:kernel in {'poly', 'rbf'}
    feature_preprocessor:kernel_pca:kernel | feature_preprocessor:__choice__ == 'kernel_pca'
    feature_preprocessor:kernel_pca:n_components | feature_preprocessor:__choice__ == 'kernel_pca'
    feature_preprocessor:kitchen_sinks:gamma | feature_preprocessor:__choice__ == 'kitchen_sinks'
    feature_preprocessor:kitchen_sinks:n_components | feature_preprocessor:__choice__ == 'kitchen_sinks'
    feature_preprocessor:nystroem_sampler:coef0 | feature_preprocessor:nystroem_sampler:kernel in {'poly', 'sigmoid'}
    feature_preprocessor:nystroem_sampler:degree | feature_preprocessor:nystroem_sampler:kernel == 'poly'
    feature_preprocessor:nystroem_sampler:gamma | feature_preprocessor:nystroem_sampler:kernel in {'poly', 'rbf', 'sigmoid'}
    feature_preprocessor:nystroem_sampler:kernel | feature_preprocessor:__choice__ == 'nystroem_sampler'
    feature_preprocessor:nystroem_sampler:n_components | feature_preprocessor:__choice__ == 'nystroem_sampler'
    feature_preprocessor:pca:keep_variance | feature_preprocessor:__choice__ == 'pca'
    feature_preprocessor:pca:whiten | feature_preprocessor:__choice__ == 'pca'
    feature_preprocessor:polynomial:degree | feature_preprocessor:__choice__ == 'polynomial'
    feature_preprocessor:polynomial:include_bias | feature_preprocessor:__choice__ == 'polynomial'
    feature_preprocessor:polynomial:interaction_only | feature_preprocessor:__choice__ == 'polynomial'
    feature_preprocessor:random_trees_embedding:bootstrap | feature_preprocessor:__choice__ == 'random_trees_embedding'
    feature_preprocessor:random_trees_embedding:max_depth | feature_preprocessor:__choice__ == 'random_trees_embedding'
    feature_preprocessor:random_trees_embedding:max_leaf_nodes | feature_preprocessor:__choice__ == 'random_trees_embedding'
    feature_preprocessor:random_trees_embedding:min_samples_leaf | feature_preprocessor:__choice__ == 'random_trees_embedding'
    feature_preprocessor:random_trees_embedding:min_samples_split | feature_preprocessor:__choice__ == 'random_trees_embedding'
    feature_preprocessor:random_trees_embedding:min_weight_fraction_leaf | feature_preprocessor:__choice__ == 'random_trees_embedding'
    feature_preprocessor:random_trees_embedding:n_estimators | feature_preprocessor:__choice__ == 'random_trees_embedding'
    feature_preprocessor:select_percentile_regression:percentile | feature_preprocessor:__choice__ == 'select_percentile_regression'
    feature_preprocessor:select_percentile_regression:score_func | feature_preprocessor:__choice__ == 'select_percentile_regression'
    feature_preprocessor:select_rates_regression:alpha | feature_preprocessor:__choice__ == 'select_rates_regression'
    feature_preprocessor:select_rates_regression:mode | feature_preprocessor:__choice__ == 'select_rates_regression'
    feature_preprocessor:select_rates_regression:score_func | feature_preprocessor:__choice__ == 'select_rates_regression'
    regressor:CustomKernelRidgeRegression:alpha | regressor:__choice__ == 'CustomKernelRidgeRegression'
    regressor:CustomKernelRidgeRegression:coef0 | regressor:CustomKernelRidgeRegression:kernel == 'polynomial'
    regressor:CustomKernelRidgeRegression:degree | regressor:CustomKernelRidgeRegression:kernel == 'polynomial'
    regressor:CustomKernelRidgeRegression:gamma | regressor:__choice__ == 'CustomKernelRidgeRegression'
    regressor:CustomKernelRidgeRegression:kernel | regressor:__choice__ == 'CustomKernelRidgeRegression'
    regressor:adaboost:learning_rate | regressor:__choice__ == 'adaboost'
    regressor:adaboost:loss | regressor:__choice__ == 'adaboost'
    regressor:adaboost:max_depth | regressor:__choice__ == 'adaboost'
    regressor:adaboost:n_estimators | regressor:__choice__ == 'adaboost'
    regressor:ard_regression:alpha_1 | regressor:__choice__ == 'ard_regression'
    regressor:ard_regression:alpha_2 | regressor:__choice__ == 'ard_regression'
    regressor:ard_regression:fit_intercept | regressor:__choice__ == 'ard_regression'
    regressor:ard_regression:lambda_1 | regressor:__choice__ == 'ard_regression'
    regressor:ard_regression:lambda_2 | regressor:__choice__ == 'ard_regression'
    regressor:ard_regression:n_iter | regressor:__choice__ == 'ard_regression'
    regressor:ard_regression:threshold_lambda | regressor:__choice__ == 'ard_regression'
    regressor:ard_regression:tol | regressor:__choice__ == 'ard_regression'
    regressor:decision_tree:criterion | regressor:__choice__ == 'decision_tree'
    regressor:decision_tree:max_depth_factor | regressor:__choice__ == 'decision_tree'
    regressor:decision_tree:max_features | regressor:__choice__ == 'decision_tree'
    regressor:decision_tree:max_leaf_nodes | regressor:__choice__ == 'decision_tree'
    regressor:decision_tree:min_impurity_decrease | regressor:__choice__ == 'decision_tree'
    regressor:decision_tree:min_samples_leaf | regressor:__choice__ == 'decision_tree'
    regressor:decision_tree:min_samples_split | regressor:__choice__ == 'decision_tree'
    regressor:decision_tree:min_weight_fraction_leaf | regressor:__choice__ == 'decision_tree'
    regressor:extra_trees:bootstrap | regressor:__choice__ == 'extra_trees'
    regressor:extra_trees:criterion | regressor:__choice__ == 'extra_trees'
    regressor:extra_trees:max_depth | regressor:__choice__ == 'extra_trees'
    regressor:extra_trees:max_features | regressor:__choice__ == 'extra_trees'
    regressor:extra_trees:max_leaf_nodes | regressor:__choice__ == 'extra_trees'
    regressor:extra_trees:min_impurity_decrease | regressor:__choice__ == 'extra_trees'
    regressor:extra_trees:min_samples_leaf | regressor:__choice__ == 'extra_trees'
    regressor:extra_trees:min_samples_split | regressor:__choice__ == 'extra_trees'
    regressor:extra_trees:min_weight_fraction_leaf | regressor:__choice__ == 'extra_trees'
    regressor:gaussian_process:alpha | regressor:__choice__ == 'gaussian_process'
    regressor:gaussian_process:thetaL | regressor:__choice__ == 'gaussian_process'
    regressor:gaussian_process:thetaU | regressor:__choice__ == 'gaussian_process'
    regressor:gradient_boosting:early_stop | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:l2_regularization | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:learning_rate | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:loss | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:max_bins | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:max_depth | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:max_leaf_nodes | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:min_samples_leaf | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:n_iter_no_change | regressor:gradient_boosting:early_stop in {'valid', 'train'}
    regressor:gradient_boosting:scoring | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:tol | regressor:__choice__ == 'gradient_boosting'
    regressor:gradient_boosting:validation_fraction | regressor:gradient_boosting:early_stop == 'valid'
    regressor:k_nearest_neighbors:n_neighbors | regressor:__choice__ == 'k_nearest_neighbors'
    regressor:k_nearest_neighbors:p | regressor:__choice__ == 'k_nearest_neighbors'
    regressor:k_nearest_neighbors:weights | regressor:__choice__ == 'k_nearest_neighbors'
    regressor:liblinear_svr:C | regressor:__choice__ == 'liblinear_svr'
    regressor:liblinear_svr:dual | regressor:__choice__ == 'liblinear_svr'
    regressor:liblinear_svr:epsilon | regressor:__choice__ == 'liblinear_svr'
    regressor:liblinear_svr:fit_intercept | regressor:__choice__ == 'liblinear_svr'
    regressor:liblinear_svr:intercept_scaling | regressor:__choice__ == 'liblinear_svr'
    regressor:liblinear_svr:loss | regressor:__choice__ == 'liblinear_svr'
    regressor:liblinear_svr:tol | regressor:__choice__ == 'liblinear_svr'
    regressor:libsvm_svr:C | regressor:__choice__ == 'libsvm_svr'
    regressor:libsvm_svr:coef0 | regressor:libsvm_svr:kernel in {'poly', 'sigmoid'}
    regressor:libsvm_svr:degree | regressor:libsvm_svr:kernel == 'poly'
    regressor:libsvm_svr:epsilon | regressor:__choice__ == 'libsvm_svr'
    regressor:libsvm_svr:gamma | regressor:libsvm_svr:kernel in {'poly', 'rbf'}
    regressor:libsvm_svr:kernel | regressor:__choice__ == 'libsvm_svr'
    regressor:libsvm_svr:max_iter | regressor:__choice__ == 'libsvm_svr'
    regressor:libsvm_svr:shrinking | regressor:__choice__ == 'libsvm_svr'
    regressor:libsvm_svr:tol | regressor:__choice__ == 'libsvm_svr'
    regressor:mlp:activation | regressor:__choice__ == 'mlp'
    regressor:mlp:alpha | regressor:__choice__ == 'mlp'
    regressor:mlp:batch_size | regressor:__choice__ == 'mlp'
    regressor:mlp:beta_1 | regressor:__choice__ == 'mlp'
    regressor:mlp:beta_2 | regressor:__choice__ == 'mlp'
    regressor:mlp:early_stopping | regressor:__choice__ == 'mlp'
    regressor:mlp:epsilon | regressor:__choice__ == 'mlp'
    regressor:mlp:hidden_layer_depth | regressor:__choice__ == 'mlp'
    regressor:mlp:learning_rate_init | regressor:__choice__ == 'mlp'
    regressor:mlp:n_iter_no_change | regressor:__choice__ == 'mlp'
    regressor:mlp:num_nodes_per_layer | regressor:__choice__ == 'mlp'
    regressor:mlp:shuffle | regressor:__choice__ == 'mlp'
    regressor:mlp:solver | regressor:__choice__ == 'mlp'
    regressor:mlp:tol | regressor:__choice__ == 'mlp'
    regressor:mlp:validation_fraction | regressor:mlp:early_stopping in {'valid'}
    regressor:random_forest:bootstrap | regressor:__choice__ == 'random_forest'
    regressor:random_forest:criterion | regressor:__choice__ == 'random_forest'
    regressor:random_forest:max_depth | regressor:__choice__ == 'random_forest'
    regressor:random_forest:max_features | regressor:__choice__ == 'random_forest'
    regressor:random_forest:max_leaf_nodes | regressor:__choice__ == 'random_forest'
    regressor:random_forest:min_impurity_decrease | regressor:__choice__ == 'random_forest'
    regressor:random_forest:min_samples_leaf | regressor:__choice__ == 'random_forest'
    regressor:random_forest:min_samples_split | regressor:__choice__ == 'random_forest'
    regressor:random_forest:min_weight_fraction_leaf | regressor:__choice__ == 'random_forest'
    regressor:sgd:alpha | regressor:__choice__ == 'sgd'
    regressor:sgd:average | regressor:__choice__ == 'sgd'
    regressor:sgd:epsilon | regressor:sgd:loss in {'huber', 'epsilon_insensitive', 'squared_epsilon_insensitive'}
    regressor:sgd:eta0 | regressor:sgd:learning_rate in {'invscaling', 'constant'}
    regressor:sgd:fit_intercept | regressor:__choice__ == 'sgd'
    regressor:sgd:l1_ratio | regressor:sgd:penalty == 'elasticnet'
    regressor:sgd:learning_rate | regressor:__choice__ == 'sgd'
    regressor:sgd:loss | regressor:__choice__ == 'sgd'
    regressor:sgd:penalty | regressor:__choice__ == 'sgd'
    regressor:sgd:power_t | regressor:sgd:learning_rate == 'invscaling'
    regressor:sgd:tol | regressor:__choice__ == 'sgd'
  Forbidden Clauses:
    (Forbidden: feature_preprocessor:CustomFeatureAgglomeration:affinity in {'cosine', 'manhattan'} && Forbidden: feature_preprocessor:CustomFeatureAgglomeration:linkage == 'ward')
    (Forbidden: regressor:liblinear_svr:dual == 'False' && Forbidden: regressor:liblinear_svr:loss == 'epsilon_insensitive')
    (Forbidden: feature_preprocessor:__choice__ == 'random_trees_embedding' && Forbidden: regressor:__choice__ == 'ard_regression')
    (Forbidden: feature_preprocessor:__choice__ == 'random_trees_embedding' && Forbidden: regressor:__choice__ == 'gaussian_process')
    (Forbidden: feature_preprocessor:__choice__ == 'random_trees_embedding' && Forbidden: regressor:__choice__ == 'gradient_boosting')
    (Forbidden: regressor:__choice__ == 'adaboost' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'adaboost' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'adaboost' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')
    (Forbidden: regressor:__choice__ == 'ard_regression' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'ard_regression' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'ard_regression' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')
    (Forbidden: regressor:__choice__ == 'decision_tree' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'decision_tree' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'decision_tree' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')
    (Forbidden: regressor:__choice__ == 'extra_trees' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'extra_trees' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'extra_trees' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')
    (Forbidden: regressor:__choice__ == 'gaussian_process' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'gaussian_process' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'gaussian_process' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')
    (Forbidden: regressor:__choice__ == 'gradient_boosting' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'gradient_boosting' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'gradient_boosting' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')
    (Forbidden: regressor:__choice__ == 'k_nearest_neighbors' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'k_nearest_neighbors' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'k_nearest_neighbors' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')
    (Forbidden: regressor:__choice__ == 'libsvm_svr' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'libsvm_svr' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'libsvm_svr' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')
    (Forbidden: regressor:__choice__ == 'mlp' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'mlp' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'mlp' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')
    (Forbidden: regressor:__choice__ == 'random_forest' && Forbidden: feature_preprocessor:__choice__ == 'kitchen_sinks')
    (Forbidden: regressor:__choice__ == 'random_forest' && Forbidden: feature_preprocessor:__choice__ == 'kernel_pca')
    (Forbidden: regressor:__choice__ == 'random_forest' && Forbidden: feature_preprocessor:__choice__ == 'nystroem_sampler')

[WARNING] [2022-11-24 13:22:07,584:Client-AutoMLSMBO(1)::food] Configuration 140 not found
[WARNING] [2022-11-24 13:22:07,584:Client-AutoMLSMBO(1)::food] Configuration 98 not found
[WARNING] [2022-11-24 13:22:07,584:Client-AutoMLSMBO(1)::food] Configuration 171 not found
[WARNING] [2022-11-24 13:22:07,585:Client-AutoMLSMBO(1)::food] Configuration 258 not found
[WARNING] [2022-11-24 13:22:07,587:Client-AutoMLSMBO(1)::food] Configuration 186 not found
[WARNING] [2022-11-24 13:22:07,587:Client-AutoMLSMBO(1)::food] Configuration 73 not found
[WARNING] [2022-11-24 13:22:07,588:Client-AutoMLSMBO(1)::food] Configuration 126 not found
[WARNING] [2022-11-24 13:22:07,588:Client-AutoMLSMBO(1)::food] Configuration 107 not found
automl.leaderboard()
          rank  ensemble_weight            type      cost   duration
model_id                                                            
1249         1             0.02   random_forest  0.711234   6.238512
2321         2             0.10             mlp  0.720866  13.717554
1484         3             0.12   liblinear_svr  0.733749   4.439584
1229         4             0.04   random_forest  0.736109   9.162984
76           5             0.06  ard_regression  0.744330   6.128804
741          6             0.14   decision_tree  0.745777   3.716614
2232         7             0.08   decision_tree  0.745777   5.895832
1915         8             0.04   random_forest  0.746908  12.408436
2641         9             0.04             mlp  0.753265   6.174275
897         10             0.18             mlp  0.755144   4.340950
1588        11             0.14             mlp  0.757426   7.620126
48          12             0.04  ard_regression  0.763495   4.857651
automl.show_models()
{   48: {   'cost': 0.7634947845927882,
            'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x1522890822e0>,
            'ensemble_weight': 0.04,
            'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x152288ea2fd0>,
            'model_id': 48,
            'rank': 1,
            'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x152288ea2d30>,
            'sklearn_regressor': None},
    76: {   'cost': 0.7443296113460505,
            'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x15228904b760>,
            'ensemble_weight': 0.06,
            'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x152288eff250>,
            'model_id': 76,
            'rank': 2,
            'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x152288effe80>,
            'sklearn_regressor': None},
    741: {   'cost': 0.7457774504638967,
             'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x1522890e6d30>,
             'ensemble_weight': 0.14,
             'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x152288e55c40>,
             'model_id': 741,
             'rank': 3,
             'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x152288e55970>,
             'sklearn_regressor': None},
    897: {   'cost': 0.7551438924638665,
             'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x152288e53340>,
             'ensemble_weight': 0.18,
             'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x152289136d30>,
             'model_id': 897,
             'rank': 4,
             'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x152289136700>,
             'sklearn_regressor': None},
    1229: {   'cost': 0.7361089631481225,
              'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x152288eff760>,
              'ensemble_weight': 0.04,
              'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x152288eb4f70>,
              'model_id': 1229,
              'rank': 5,
              'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x152288eb4820>,
              'sklearn_regressor': None},
    1249: {   'cost': 0.7112338556454058,
              'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x152288ecbd30>,
              'ensemble_weight': 0.02,
              'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x15228887fb80>,
              'model_id': 1249,
              'rank': 6,
              'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x15228887f820>,
              'sklearn_regressor': None},
    1484: {   'cost': 0.7337492392852349,
              'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x15228905c580>,
              'ensemble_weight': 0.12,
              'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x152288f61880>,
              'model_id': 1484,
              'rank': 7,
              'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x152288f611f0>,
              'sklearn_regressor': None},
    1588: {   'cost': 0.7574263138158805,
              'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x152288eb43d0>,
              'ensemble_weight': 0.14,
              'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x15228873dc70>,
              'model_id': 1588,
              'rank': 8,
              'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x15228873de50>,
              'sklearn_regressor': None},
    1915: {   'cost': 0.7469084997477045,
              'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x15228887f520>,
              'ensemble_weight': 0.04,
              'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x152288a0c1c0>,
              'model_id': 1915,
              'rank': 9,
              'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x152288a0c760>,
              'sklearn_regressor': None},
    2232: {   'cost': 0.7457774504638967,
              'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x15228873d670>,
              'ensemble_weight': 0.08,
              'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x152288df9d90>,
              'model_id': 2232,
              'rank': 10,
              'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x152288df93a0>,
              'sklearn_regressor': None},
    2321: {   'cost': 0.7208656972742111,
              'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x152288d1fb50>,
              'ensemble_weight': 0.1,
              'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x152288fd01f0>,
              'model_id': 2321,
              'rank': 11,
              'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x152288fd0cd0>,
              'sklearn_regressor': None},
    2641: {   'cost': 0.7532645256504671,
              'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x152288e32370>,
              'ensemble_weight': 0.04,
              'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x152288fbee20>,
              'model_id': 2641,
              'rank': 12,
              'regressor': <autosklearn.pipeline.components.regression.RegressorChoice object at 0x152288fbe970>,
              'sklearn_regressor': None}}
Best Ensemble models
[{'cost_0.7634947845927882_ensembleWeight_0.04': Configuration(values={
  'data_preprocessor:__choice__': 'feature_type',
  'data_preprocessor:feature_type:numerical_transformer:imputation:strategy': 'median',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__': 'robust_scaler',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_max': 0.8745903205391625,
  'data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_min': 0.18836659722242718,
  'feature_preprocessor:__choice__': 'no_preprocessing',
  'regressor:__choice__': 'ard_regression',
  'regressor:ard_regression:alpha_1': 0.0004022380369459763,
  'regressor:ard_regression:alpha_2': 8.366533961640807e-10,
  'regressor:ard_regression:fit_intercept': 'True',
  'regressor:ard_regression:lambda_1': 2.2763908119181363e-05,
  'regressor:ard_regression:lambda_2': 2.9832962508093084e-09,
  'regressor:ard_regression:n_iter': 300,
  'regressor:ard_regression:threshold_lambda': 1656.763159475538,
  'regressor:ard_regression:tol': 0.02988947681542288,
})
}, {'cost_0.7443296113460505_ensembleWeight_0.06': Configuration(values={
  'data_preprocessor:__choice__': 'feature_type',
  'data_preprocessor:feature_type:numerical_transformer:imputation:strategy': 'median',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__': 'robust_scaler',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_max': 0.9855621155127989,
  'data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_min': 0.07020502215293441,
  'feature_preprocessor:__choice__': 'extra_trees_preproc_for_regression',
  'feature_preprocessor:extra_trees_preproc_for_regression:bootstrap': 'True',
  'feature_preprocessor:extra_trees_preproc_for_regression:criterion': 'mse',
  'feature_preprocessor:extra_trees_preproc_for_regression:max_depth': 'None',
  'feature_preprocessor:extra_trees_preproc_for_regression:max_features': 1.0,
  'feature_preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None',
  'feature_preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 1,
  'feature_preprocessor:extra_trees_preproc_for_regression:min_samples_split': 16,
  'feature_preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0,
  'feature_preprocessor:extra_trees_preproc_for_regression:n_estimators': 100,
  'regressor:__choice__': 'ard_regression',
  'regressor:ard_regression:alpha_1': 3.426881398868954e-05,
  'regressor:ard_regression:alpha_2': 1.0000000000000004e-06,
  'regressor:ard_regression:fit_intercept': 'True',
  'regressor:ard_regression:lambda_1': 1.0796531240444366e-06,
  'regressor:ard_regression:lambda_2': 1.0000000000000004e-06,
  'regressor:ard_regression:n_iter': 300,
  'regressor:ard_regression:threshold_lambda': 11577.650336086219,
  'regressor:ard_regression:tol': 0.0009328118457777794,
})
}, {'cost_0.7457774504638967_ensembleWeight_0.14': Configuration(values={
  'data_preprocessor:__choice__': 'feature_type',
  'data_preprocessor:feature_type:numerical_transformer:imputation:strategy': 'most_frequent',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__': 'minmax',
  'feature_preprocessor:__choice__': 'select_rates_regression',
  'feature_preprocessor:select_rates_regression:alpha': 0.3551251177278692,
  'feature_preprocessor:select_rates_regression:mode': 'fwe',
  'feature_preprocessor:select_rates_regression:score_func': 'f_regression',
  'regressor:__choice__': 'decision_tree',
  'regressor:decision_tree:criterion': 'friedman_mse',
  'regressor:decision_tree:max_depth_factor': 0.3407458139216495,
  'regressor:decision_tree:max_features': 1.0,
  'regressor:decision_tree:max_leaf_nodes': 'None',
  'regressor:decision_tree:min_impurity_decrease': 0.0,
  'regressor:decision_tree:min_samples_leaf': 20,
  'regressor:decision_tree:min_samples_split': 4,
  'regressor:decision_tree:min_weight_fraction_leaf': 0.0,
})
}, {'cost_0.7457774504638967_ensembleWeight_0.14': Configuration(values={
  'data_preprocessor:__choice__': 'feature_type',
  'data_preprocessor:feature_type:numerical_transformer:imputation:strategy': 'most_frequent',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__': 'quantile_transformer',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:quantile_transformer:n_quantiles': 1387,
  'data_preprocessor:feature_type:numerical_transformer:rescaling:quantile_transformer:output_distribution': 'normal',
  'feature_preprocessor:__choice__': 'no_preprocessing',
  'regressor:__choice__': 'decision_tree',
  'regressor:decision_tree:criterion': 'friedman_mse',
  'regressor:decision_tree:max_depth_factor': 1.7231882546470856,
  'regressor:decision_tree:max_features': 1.0,
  'regressor:decision_tree:max_leaf_nodes': 'None',
  'regressor:decision_tree:min_impurity_decrease': 0.0,
  'regressor:decision_tree:min_samples_leaf': 20,
  'regressor:decision_tree:min_samples_split': 5,
  'regressor:decision_tree:min_weight_fraction_leaf': 0.0,
})
}, {'cost_0.7551438924638665_ensembleWeight_0.18': Configuration(values={
  'data_preprocessor:__choice__': 'feature_type',
  'data_preprocessor:feature_type:numerical_transformer:imputation:strategy': 'mean',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__': 'normalize',
  'feature_preprocessor:__choice__': 'random_trees_embedding',
  'feature_preprocessor:random_trees_embedding:bootstrap': 'True',
  'feature_preprocessor:random_trees_embedding:max_depth': 9,
  'feature_preprocessor:random_trees_embedding:max_leaf_nodes': 'None',
  'feature_preprocessor:random_trees_embedding:min_samples_leaf': 14,
  'feature_preprocessor:random_trees_embedding:min_samples_split': 16,
  'feature_preprocessor:random_trees_embedding:min_weight_fraction_leaf': 1.0,
  'feature_preprocessor:random_trees_embedding:n_estimators': 75,
  'regressor:__choice__': 'mlp',
  'regressor:mlp:activation': 'tanh',
  'regressor:mlp:alpha': 0.003365643870013449,
  'regressor:mlp:batch_size': 'auto',
  'regressor:mlp:beta_1': 0.9,
  'regressor:mlp:beta_2': 0.999,
  'regressor:mlp:early_stopping': 'valid',
  'regressor:mlp:epsilon': 1e-08,
  'regressor:mlp:hidden_layer_depth': 1,
  'regressor:mlp:learning_rate_init': 0.009483710997252296,
  'regressor:mlp:n_iter_no_change': 32,
  'regressor:mlp:num_nodes_per_layer': 23,
  'regressor:mlp:shuffle': 'True',
  'regressor:mlp:solver': 'adam',
  'regressor:mlp:tol': 0.0001,
  'regressor:mlp:validation_fraction': 0.1,
})
}, {'cost_0.7361089631481225_ensembleWeight_0.04': Configuration(values={
  'data_preprocessor:__choice__': 'feature_type',
  'data_preprocessor:feature_type:numerical_transformer:imputation:strategy': 'mean',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__': 'robust_scaler',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_max': 0.7088849452467341,
  'data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_min': 0.2846892987018524,
  'feature_preprocessor:__choice__': 'select_percentile_regression',
  'feature_preprocessor:select_percentile_regression:percentile': 50.0,
  'feature_preprocessor:select_percentile_regression:score_func': 'f_regression',
  'regressor:__choice__': 'random_forest',
  'regressor:random_forest:bootstrap': 'False',
  'regressor:random_forest:criterion': 'friedman_mse',
  'regressor:random_forest:max_depth': 'None',
  'regressor:random_forest:max_features': 0.9955200843399947,
  'regressor:random_forest:max_leaf_nodes': 'None',
  'regressor:random_forest:min_impurity_decrease': 0.0,
  'regressor:random_forest:min_samples_leaf': 6,
  'regressor:random_forest:min_samples_split': 15,
  'regressor:random_forest:min_weight_fraction_leaf': 0.0,
})
}, {'cost_0.7112338556454058_ensembleWeight_0.02': Configuration(values={
  'data_preprocessor:__choice__': 'feature_type',
  'data_preprocessor:feature_type:numerical_transformer:imputation:strategy': 'most_frequent',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__': 'none',
  'feature_preprocessor:__choice__': 'select_percentile_regression',
  'feature_preprocessor:select_percentile_regression:percentile': 18.630339040767723,
  'feature_preprocessor:select_percentile_regression:score_func': 'f_regression',
  'regressor:__choice__': 'random_forest',
  'regressor:random_forest:bootstrap': 'False',
  'regressor:random_forest:criterion': 'friedman_mse',
  'regressor:random_forest:max_depth': 'None',
  'regressor:random_forest:max_features': 0.49024184071789956,
  'regressor:random_forest:max_leaf_nodes': 'None',
  'regressor:random_forest:min_impurity_decrease': 0.0,
  'regressor:random_forest:min_samples_leaf': 7,
  'regressor:random_forest:min_samples_split': 18,
  'regressor:random_forest:min_weight_fraction_leaf': 0.0,
})
}, {'cost_0.7337492392852349_ensembleWeight_0.12': Configuration(values={
  'data_preprocessor:__choice__': 'feature_type',
  'data_preprocessor:feature_type:numerical_transformer:imputation:strategy': 'median',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__': 'robust_scaler',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_max': 0.860072883126928,
  'data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_min': 0.25670098395500646,
  'feature_preprocessor:__choice__': 'select_rates_regression',
  'feature_preprocessor:select_rates_regression:alpha': 0.10201868751502319,
  'feature_preprocessor:select_rates_regression:mode': 'fwe',
  'feature_preprocessor:select_rates_regression:score_func': 'f_regression',
  'regressor:__choice__': 'liblinear_svr',
  'regressor:liblinear_svr:C': 5.147811701576068,
  'regressor:liblinear_svr:dual': 'False',
  'regressor:liblinear_svr:epsilon': 0.1399774783846639,
  'regressor:liblinear_svr:fit_intercept': 'True',
  'regressor:liblinear_svr:intercept_scaling': 1,
  'regressor:liblinear_svr:loss': 'squared_epsilon_insensitive',
  'regressor:liblinear_svr:tol': 0.00013034519199755823,
})
}, {'cost_0.7574263138158805_ensembleWeight_0.14': Configuration(values={
  'data_preprocessor:__choice__': 'feature_type',
  'data_preprocessor:feature_type:numerical_transformer:imputation:strategy': 'median',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__': 'normalize',
  'feature_preprocessor:__choice__': 'pca',
  'feature_preprocessor:pca:keep_variance': 0.9503722750613144,
  'feature_preprocessor:pca:whiten': 'False',
  'regressor:__choice__': 'mlp',
  'regressor:mlp:activation': 'relu',
  'regressor:mlp:alpha': 0.0015774240400605267,
  'regressor:mlp:batch_size': 'auto',
  'regressor:mlp:beta_1': 0.9,
  'regressor:mlp:beta_2': 0.999,
  'regressor:mlp:early_stopping': 'train',
  'regressor:mlp:epsilon': 1e-08,
  'regressor:mlp:hidden_layer_depth': 3,
  'regressor:mlp:learning_rate_init': 0.0013679167684264347,
  'regressor:mlp:n_iter_no_change': 32,
  'regressor:mlp:num_nodes_per_layer': 25,
  'regressor:mlp:shuffle': 'True',
  'regressor:mlp:solver': 'adam',
  'regressor:mlp:tol': 0.0001,
})
}, {'cost_0.7469084997477045_ensembleWeight_0.04': Configuration(values={
  'data_preprocessor:__choice__': 'feature_type',
  'data_preprocessor:feature_type:numerical_transformer:imputation:strategy': 'mean',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__': 'robust_scaler',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_max': 0.9014986559139786,
  'data_preprocessor:feature_type:numerical_transformer:rescaling:robust_scaler:q_min': 0.12342980601829459,
  'feature_preprocessor:__choice__': 'extra_trees_preproc_for_regression',
  'feature_preprocessor:extra_trees_preproc_for_regression:bootstrap': 'False',
  'feature_preprocessor:extra_trees_preproc_for_regression:criterion': 'mse',
  'feature_preprocessor:extra_trees_preproc_for_regression:max_depth': 'None',
  'feature_preprocessor:extra_trees_preproc_for_regression:max_features': 0.9605603804657236,
  'feature_preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None',
  'feature_preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 1,
  'feature_preprocessor:extra_trees_preproc_for_regression:min_samples_split': 20,
  'feature_preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0,
  'feature_preprocessor:extra_trees_preproc_for_regression:n_estimators': 100,
  'regressor:__choice__': 'random_forest',
  'regressor:random_forest:bootstrap': 'False',
  'regressor:random_forest:criterion': 'friedman_mse',
  'regressor:random_forest:max_depth': 'None',
  'regressor:random_forest:max_features': 1.0,
  'regressor:random_forest:max_leaf_nodes': 'None',
  'regressor:random_forest:min_impurity_decrease': 0.0,
  'regressor:random_forest:min_samples_leaf': 8,
  'regressor:random_forest:min_samples_split': 5,
  'regressor:random_forest:min_weight_fraction_leaf': 0.0,
})
}, {'cost_0.7457774504638967_ensembleWeight_0.08': Configuration(values={
  'data_preprocessor:__choice__': 'feature_type',
  'data_preprocessor:feature_type:numerical_transformer:imputation:strategy': 'most_frequent',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__': 'minmax',
  'feature_preprocessor:__choice__': 'select_rates_regression',
  'feature_preprocessor:select_rates_regression:alpha': 0.3551251177278692,
  'feature_preprocessor:select_rates_regression:mode': 'fwe',
  'feature_preprocessor:select_rates_regression:score_func': 'f_regression',
  'regressor:__choice__': 'decision_tree',
  'regressor:decision_tree:criterion': 'friedman_mse',
  'regressor:decision_tree:max_depth_factor': 0.3407458139216495,
  'regressor:decision_tree:max_features': 1.0,
  'regressor:decision_tree:max_leaf_nodes': 'None',
  'regressor:decision_tree:min_impurity_decrease': 0.0,
  'regressor:decision_tree:min_samples_leaf': 20,
  'regressor:decision_tree:min_samples_split': 4,
  'regressor:decision_tree:min_weight_fraction_leaf': 0.0,
})
}, {'cost_0.7457774504638967_ensembleWeight_0.08': Configuration(values={
  'data_preprocessor:__choice__': 'feature_type',
  'data_preprocessor:feature_type:numerical_transformer:imputation:strategy': 'most_frequent',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__': 'quantile_transformer',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:quantile_transformer:n_quantiles': 1387,
  'data_preprocessor:feature_type:numerical_transformer:rescaling:quantile_transformer:output_distribution': 'normal',
  'feature_preprocessor:__choice__': 'no_preprocessing',
  'regressor:__choice__': 'decision_tree',
  'regressor:decision_tree:criterion': 'friedman_mse',
  'regressor:decision_tree:max_depth_factor': 1.7231882546470856,
  'regressor:decision_tree:max_features': 1.0,
  'regressor:decision_tree:max_leaf_nodes': 'None',
  'regressor:decision_tree:min_impurity_decrease': 0.0,
  'regressor:decision_tree:min_samples_leaf': 20,
  'regressor:decision_tree:min_samples_split': 5,
  'regressor:decision_tree:min_weight_fraction_leaf': 0.0,
})
}, {'cost_0.7208656972742111_ensembleWeight_0.1': Configuration(values={
  'data_preprocessor:__choice__': 'feature_type',
  'data_preprocessor:feature_type:numerical_transformer:imputation:strategy': 'median',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__': 'normalize',
  'feature_preprocessor:__choice__': 'extra_trees_preproc_for_regression',
  'feature_preprocessor:extra_trees_preproc_for_regression:bootstrap': 'False',
  'feature_preprocessor:extra_trees_preproc_for_regression:criterion': 'mse',
  'feature_preprocessor:extra_trees_preproc_for_regression:max_depth': 'None',
  'feature_preprocessor:extra_trees_preproc_for_regression:max_features': 0.9954693766494344,
  'feature_preprocessor:extra_trees_preproc_for_regression:max_leaf_nodes': 'None',
  'feature_preprocessor:extra_trees_preproc_for_regression:min_samples_leaf': 4,
  'feature_preprocessor:extra_trees_preproc_for_regression:min_samples_split': 7,
  'feature_preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf': 0.0,
  'feature_preprocessor:extra_trees_preproc_for_regression:n_estimators': 100,
  'regressor:__choice__': 'mlp',
  'regressor:mlp:activation': 'relu',
  'regressor:mlp:alpha': 1.8717856827681902e-05,
  'regressor:mlp:batch_size': 'auto',
  'regressor:mlp:beta_1': 0.9,
  'regressor:mlp:beta_2': 0.999,
  'regressor:mlp:early_stopping': 'train',
  'regressor:mlp:epsilon': 1e-08,
  'regressor:mlp:hidden_layer_depth': 3,
  'regressor:mlp:learning_rate_init': 0.0004899298423230862,
  'regressor:mlp:n_iter_no_change': 32,
  'regressor:mlp:num_nodes_per_layer': 128,
  'regressor:mlp:shuffle': 'True',
  'regressor:mlp:solver': 'adam',
  'regressor:mlp:tol': 0.0001,
})
}, {'cost_0.7532645256504671_ensembleWeight_0.04': Configuration(values={
  'data_preprocessor:__choice__': 'feature_type',
  'data_preprocessor:feature_type:numerical_transformer:imputation:strategy': 'mean',
  'data_preprocessor:feature_type:numerical_transformer:rescaling:__choice__': 'normalize',
  'feature_preprocessor:__choice__': 'pca',
  'feature_preprocessor:pca:keep_variance': 0.9758356942364995,
  'feature_preprocessor:pca:whiten': 'False',
  'regressor:__choice__': 'mlp',
  'regressor:mlp:activation': 'relu',
  'regressor:mlp:alpha': 1.019702201299194e-05,
  'regressor:mlp:batch_size': 'auto',
  'regressor:mlp:beta_1': 0.9,
  'regressor:mlp:beta_2': 0.999,
  'regressor:mlp:early_stopping': 'train',
  'regressor:mlp:epsilon': 1e-08,
  'regressor:mlp:hidden_layer_depth': 1,
  'regressor:mlp:learning_rate_init': 0.03433014052514527,
  'regressor:mlp:n_iter_no_change': 32,
  'regressor:mlp:num_nodes_per_layer': 101,
  'regressor:mlp:shuffle': 'True',
  'regressor:mlp:solver': 'adam',
  'regressor:mlp:tol': 0.0001,
})
}]
Error: Cannot find Jupyter/Colab namespace for Python
Error: Cannot find Jupyter/Colab namespace for Python
Error: Cannot find Jupyter/Colab namespace for Python
